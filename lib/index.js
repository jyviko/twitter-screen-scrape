// Generated by CoffeeScript 1.9.3
(function() {
  var ACTIONS, Readable, TwitterPosts, cheerio, getPostElements, request,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  Readable = require('readable-stream').Readable;

  cheerio = require('cheerio');

  request = require('request-promise');

  ACTIONS = ['reply', 'retweet', 'favorite'];


  /**
   * Make a request for a Twitter page, parse the response, and get all the tweet
     elements.
   * @param {String} username
   * @param {String} [startingId] The maximum tweet id query for (the lowest one
     from the last request), or undefined if this is the first request.
   * @return {Array} An array of elements.
   */

  getPostElements = function(username, startingId) {
    return request.get({
      uri: "https://twitter.com/i/profiles/show/" + username + "/timeline",
      qs: {
        'include_available_features': '1',
        'include_entities': '1',
        'max_position': startingId
      }
    });
  };


  /**
   * Stream that scrapes as many tweets as possible for a given user.
   * @param {String} options.username
   * @param {Boolean} options.retweets Whether to include retweets.
   * @return {Stream} A stream of tweet objects.
   */

  TwitterPosts = (function(superClass) {
    extend(TwitterPosts, superClass);

    TwitterPosts.prototype._lock = false;

    TwitterPosts.prototype._minPostId = void 0;

    function TwitterPosts(arg) {
      this.username = arg.username, this.retweets = arg.retweets;
      this.destroy = bind(this.destroy, this);
      this._read = bind(this._read, this);
      if (this.retweets == null) {
        this.retweets = true;
      }
      TwitterPosts.__super__.constructor.call(this, {
        highWaterMark: 16,
        objectMode: true
      });
      this._readableState.destroyed = false;
    }

    TwitterPosts.prototype._read = function() {
      var hasMorePosts, lastPost;
      if (this._lock) {
        return;
      }
      this._lock = true;
      if (this._readableState.destroyed) {
        this.push(null);
        return;
      }
      hasMorePosts = void 0;
      lastPost = void 0;
      return getPostElements(this.username, this._minPostId).then(function(response) {
        var html;
        response = JSON.parse(response);
        html = response['items_html'].trim();
        hasMorePosts = html !== '';
        return cheerio.load(html);
      }).then((function(_this) {
        return function($) {
          var action, element, hasEmitted, i, id, isRetweet, j, k, len, len1, len2, pic, pics, post, ref, wrapper;
          hasEmitted = false;
          ref = $('.original-tweet');
          for (i = 0, len = ref.length; i < len; i++) {
            element = ref[i];
            id = $(element).attr('data-item-id');
            _this._minPostId = id;
            isRetweet = $(element).find('.js-retweet-text').length !== 0;
            if (!_this.retweets && isRetweet) {
              continue;
            }
            post = {
              id: id,
              isRetweet: isRetweet,
              username: _this.username,
              text: $(element).find('.tweet-text').first().text(),
              time: +$(element).find('.js-short-timestamp').first().attr('data-time'),
              images: []
            };
            for (j = 0, len1 = ACTIONS.length; j < len1; j++) {
              action = ACTIONS[j];
              wrapper = $(element).find(".ProfileTweet-action--" + action + " .ProfileTweet-actionCount");
              post[action] = (wrapper.length !== 0 ? +$(wrapper).first().attr('data-tweet-stat-count') : void 0);
            }
            pics = $(element).find('.multi-photos .multi-photo[data-url], [data-card-type=photo] [data-url]');
            for (k = 0, len2 = pics.length; k < len2; k++) {
              pic = pics[k];
              post.images.push($(pic).attr('data-url'));
            }
            if (lastPost != null) {
              _this.push(lastPost);
              hasEmitted = true;
            }
            lastPost = post;
          }
          if (hasMorePosts) {
            _this._lock = false;
          }
          if (lastPost != null) {
            _this.push(lastPost);
            hasEmitted = true;
          }
          if (!hasMorePosts) {
            _this.push(null);
          }
          if (!hasEmitted && hasMorePosts) {
            return _this._read();
          }
        };
      })(this));
    };

    TwitterPosts.prototype.destroy = function() {
      if (this._readableState.destroyed) {
        return;
      }
      this._readableState.destroyed = true;
      return this._destroy((function(_this) {
        return function(err) {
          if (err) {
            _this.emit('error', err);
          }
          return _this.emit('close');
        };
      })(this));
    };

    TwitterPosts.prototype._destroy = function(cb) {
      return process.nextTick(cb);
    };

    return TwitterPosts;

  })(Readable);

  module.exports = TwitterPosts;

}).call(this);
